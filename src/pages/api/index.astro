---
import BaseLayout from "../../layouts/BaseLayout.astro";
import { getEnhancedData } from "../../lib/enhancedData";

// Fetch content from Notion
const { contentAreas } = await getEnhancedData();

// Get data page content or use default if not available
const dataContent = contentAreas?.data || {
  title: "Gap Map API & Data",
  content: `
  <h2>Use Our Data</h2>
  <p>Gap Map provides structured data about R&D gaps, foundational capabilities, and related resources that you can use in your own applications and research.</p>
  
  <div class="download-section">
    <h3>Download Complete Dataset</h3>
    <p>Download all data files as a single ZIP package:</p>
    <a href="/download/gapmap-data.zip" class="download-button">Download Dataset (.zip)</a>
  </div>
  
  <h2>Static API Endpoints</h2>
  <p>All data is available via JSON endpoints that can be accessed directly:</p>
  
  <div class="endpoints">
    <div class="endpoint">
      <h3>R&D Gaps</h3>
      <code>GET /data/gaps.json</code>
      <p>All research gaps with their descriptions, fields, and related capabilities.</p>
      <a href="/data/gaps.json" target="_blank">View Gaps JSON</a>
    </div>
    
    <div class="endpoint">
      <h3>Foundational Capabilities</h3>
      <code>GET /data/capabilities.json</code>
      <p>All foundational capabilities with their descriptions, related gaps, and resources.</p>
      <a href="/data/capabilities.json" target="_blank">View Capabilities JSON</a>
    </div>
    
    <div class="endpoint">
      <h3>Fields</h3>
      <code>GET /data/fields.json</code>
      <p>Research fields and disciplines referenced by the gaps.</p>
      <a href="/data/fields.json" target="_blank">View Fields JSON</a>
    </div>
    
    <div class="endpoint">
      <h3>Resources</h3>
      <code>GET /data/resources.json</code>
      <p>Resources related to foundational capabilities.</p>
      <a href="/data/resources.json" target="_blank">View Resources JSON</a>
    </div>
    
    <div class="endpoint">
      <h3>Complete Dataset</h3>
      <code>GET /data/gapmap-data.json</code>
      <p>The complete dataset in a single file.</p>
      <a href="/data/gapmap-data.json" target="_blank">View Complete JSON</a>
    </div>
    
    <div class="endpoint">
      <h3>Schema</h3>
      <code>GET /data/schema.json</code>
      <p>JSON Schema describing the data format.</p>
      <a href="/data/schema.json" target="_blank">View Schema</a>
    </div>
  </div>
  
  <h2>Usage Examples</h2>
  <h3>JavaScript Example</h3>
  <pre><code>
// Fetch and display R&D gaps
async function fetchGaps() {
  const response = await fetch('https://gap-map.org/data/gaps.json');
  const gaps = await response.json();
  
  // Display the first 5 gaps
  const gapsList = gaps.slice(0, 5).map(gap => 
    \`&lt;div&gt;&lt;h3&gt;\${gap.name}&lt;/h3&gt;&lt;p&gt;\${gap.description}&lt;/p&gt;&lt;/div&gt;\`
  ).join('');
  
  document.getElementById('gaps-container').innerHTML = gapsList;
}
  </code></pre>
  
  <h3>Python Example</h3>
  <pre><code>
import requests
import pandas as pd

# Fetch capabilities data
response = requests.get('https://gap-map.org/data/capabilities.json')
capabilities = response.json()

# Convert to DataFrame for analysis
df = pd.DataFrame(capabilities)
print(f"Total capabilities: {len(df)}")

# Count capabilities by tag
tag_counts = {}
for capability in capabilities:
    for tag in capability.get('tags', []):
        tag_counts[tag] = tag_counts.get(tag, 0) + 1

print("Top tags:", sorted(tag_counts.items(), key=lambda x: x[1], reverse=True)[:5])
  </code></pre>
  
  <h2>Citation</h2>
  <p>If you use this data in your research or applications, please cite:</p>
  <pre>
Convergent Research (2025). Gap Map Database. 
Retrieved from https://gap-map.org/
</pre>
  
  <h2>Terms of Use</h2>
  <p>This data is provided under the <a href="#" target="_blank">MIT License</a>. You are free to use, share, and adapt the data for non-commercial purposes with appropriate attribution.</p>
  `
};
---

<BaseLayout title={`${dataContent.title} - Gap Map`}>
  <div class="data-page">
    <div class="data-header">
      <h1>{dataContent.title}</h1>
    </div>
    
    <div class="data-content">
      <div class="content-container notion-content" set:html={dataContent.content} />
    </div>
  </div>
</BaseLayout>

<style lang="scss">
.data-page {
  display: flex;
  flex-direction: column;
  gap: $spacing-xl;
  max-width: 80ch;
  margin: 0 auto;
}

.data-content {
  line-height: 1.6;
  color: var(--text-light);
  
  .content-container {
    :global(h2) {
      font-size: $font-size-xl;
      margin-top: $spacing-xxl;
      margin-bottom: $spacing-md;
      color: var(--text-color);
    }
    
    :global(h3) {
      font-size: $font-size-lg;
      margin-top: $spacing-lg;
      margin-bottom: $spacing-sm;
      color: var(--text-color);
    }
    
    :global(p) {
      margin-bottom: $spacing-lg;
    }
    
    :global(pre) {
      background-color: var(--background-color-dark);
      padding: $spacing-md;
      border-radius: $border-radius-md;
      overflow-x: auto;
      margin-bottom: $spacing-lg;
      
      :global(code) {
        background-color: transparent;
        padding: 0;
        font-family: monospace;
      }
    }
    
    :global(code) {
      background-color: var(--background-color-dark);
      padding: $spacing-xs $spacing-sm;
      border-radius: $border-radius-sm;
      font-family: monospace;
    }
    
    :global(.download-button) {
      display: inline-block;
      background-color: var(--primary-color);
      color: white;
      padding: $spacing-sm $spacing-lg;
      border-radius: $border-radius-md;
      text-decoration: none;
      font-weight: 500;
      margin: $spacing-md 0;
      transition: background-color 0.2s ease;
      
      &:hover {
        background-color: var(--highlight-color);
      }
    }
    
    :global(.download-section) {
      background-color: var(--card-background);
      border-radius: $border-radius-md;
      padding: $spacing-lg;
      margin: $spacing-lg 0;
      border-left: 4px solid var(--primary-color);
    }
    
    :global(.endpoints) {
      display: grid;
      grid-template-columns: 1fr;
      gap: $spacing-lg;
      margin: $spacing-lg 0;
      
      @media (min-width: 768px) {
        grid-template-columns: 1fr 1fr;
      }
    }
    
    :global(.endpoint) {
      background-color: var(--card-background);
      border-radius: $border-radius-md;
      padding: $spacing-lg;
      border: 1px solid var(--border-color);
      
      h3 {
        margin-top: 0;
      }
      
      code {
        display: block;
        margin: $spacing-sm 0;
        padding: $spacing-sm;
        background-color: var(--background-color-dark);
        color: var(--text-color);
      }
      
      a {
        color: var(--primary-color);
        text-decoration: none;
        display: inline-block;
        margin-top: $spacing-sm;
        
        &:hover {
          text-decoration: underline;
        }
      }
    }
  }
}

// Dark mode adjustments
.dark-mode {
  .data-content {
    .content-container {
      :global(code), :global(pre) {
        background-color: var(--card-background);
      }
      
      :global(.download-section) {
        background-color: var(--card-background-dark);
      }
      
      :global(.endpoint) {
        background-color: var(--card-background-dark);
        border-color: var(--border-dull);
        
        code {
          background-color: rgba(0, 0, 0, 0.2);
        }
      }
    }
  }
}
</style>