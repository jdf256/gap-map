---
import BaseLayout from "../../layouts/BaseLayout.astro";
import SolutionCard from "../../components/SolutionCard.astro";
import RankIndicator from "../../components/standalone/RankIndicator";
import EnhancedBackButton from "../../components/standalone/EnhancedBackButton";
import { getAllData } from "../../lib/notion";
import { getEnhancedData } from "../../lib/enhancedData";

export async function getStaticPaths() {
  // Fetch all enhanced data
  const { bottlenecks } = await getEnhancedData();

  // Generate paths for each bottleneck
  return bottlenecks.map((bottleneck) => {
    return {
      params: { slug: bottleneck.slug },
      props: { bottleneck },
    };
  });
}

// TypeScript type for the props
interface Props {
  bottleneck: any; // Type comes from getStaticPaths
}

// Get the bottleneck from props
const { bottleneck } = Astro.props;

// 404 handling (should not happen with static paths, but just in case)
if (!bottleneck) {
  return Astro.redirect("/404");
}

// Extract tags for display
const publicTags = bottleneck.tags || [];
---

<BaseLayout title={`${bottleneck.title} - Convergent 101`}>
  <EnhancedBackButton client:load />
  
  <div class="bottleneck-detail">
    <div class="bottleneck-detail__header">
      <div class="bottleneck-detail__meta">
        {
          bottleneck.discipline && bottleneck.discipline.title && (
          <div class={`bottleneck-detail__discipline active ${bottleneck.discipline.colorClass || ''}`}>
              {bottleneck.discipline.title}
            </div>
          )
        }
        
        <!-- Use the existing React RankIndicator with client:load directive -->
        <div class="bottleneck-detail__rank">
          <RankIndicator rank={bottleneck.rank || 0} client:load />
        </div>
      </div>

      <h1 class="bottleneck-detail__title">{bottleneck.title}</h1>
      
      <!-- Display public tags if available -->
      {publicTags.length > 0 && (
        <div class="bottleneck-detail__tags">
          {publicTags.map((tag) => (
            <span class="bottleneck-detail__tag">{tag}</span>
          ))}
        </div>
      )}
    </div>

    <div class="bottleneck-detail__content" set:html={bottleneck.content} />

    {
      bottleneck.solutions && bottleneck.solutions.length > 0 && (
        <div class="bottleneck-detail__solutions">
          <h3>Potential Solutions</h3>
          <div class="bottleneck-detail__solutions-grid">
            {bottleneck.solutions.map((solution) => (
              <SolutionCard solution={solution} rank={solution.rank} />
            ))}
          </div>
        </div>
      )
    }
  </div>
</BaseLayout>

<script define:vars={{ bottleneckId: bottleneck.id, bottleneckSlug: bottleneck.slug }}>
  // Save the current bottleneck info for potential scroll restoration
  import { saveScrollPosition } from '../../lib/scrollPositionUtils';
  
  document.addEventListener('astro:page-load', () => {
    // This runs when the page is fully loaded
    if (bottleneckId) {
      // Don't actually need to do anything here since we're tracking clicks in the BottleneckCard
      // But we could manually save position for direct URL accesses
      // saveScrollPosition(bottleneckId, bottleneckSlug);
    }
  });
</script>

<style lang="scss">
  .bottleneck-detail__tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    margin-top: 0.5rem;
  }
  
  .bottleneck-detail__tag {
    display: inline-block;
    background-color: var(--background-color-dark);
    color: var(--text-light);
    padding: 0.25rem 0.5rem;
    border-radius: 4px;
    font-size: 0.875rem;
  }
</style>