---
import BaseLayout from "../../layouts/BaseLayout.astro";
import Search from "../../components/standalone/Search";
import FieldFilter from "../../components/standalone/FieldFilter";
import CapabilitiesGrid from "../../components/standalone/CapabilitiesGrid";
import ViewToggle from "../../components/standalone/ViewToggle";
import SortControl from "../../components/standalone/SortControl";
import PrivateTagBanner from "../../components/standalone/PrivateTagBanner";
import { extractTags, parseUrlParamsWithTags } from "../../lib/tagUtils";
import { getEnhancedData } from "../../lib/enhancedData";

// Fetch all enhanced data from Notion at build time
const { bottlenecks, foundationalCapabilities, fields, contentAreas } =
  await getEnhancedData();

// Extract all unique tags from capabilities
const tags = extractTags(foundationalCapabilities);

// Get URL parameters including tag parameters
const { searchQuery, fieldSlugs, sortBy, tag, privateTag } =
  parseUrlParamsWithTags(Astro.url.toString());

// Calculate counts for display
const bottleneckCount = bottlenecks.length;
const capabilityCount = foundationalCapabilities.length;

// Calculate field counts for capabilities (aggregated from related bottlenecks)
const fieldCounts = {};
foundationalCapabilities.forEach((capability) => {
  if (capability.bottlenecks && Array.isArray(capability.bottlenecks)) {
    capability.bottlenecks.forEach((bottleneck) => {
      if (bottleneck.field && bottleneck.field.id) {
        fieldCounts[bottleneck.field.id] =
          (fieldCounts[bottleneck.field.id] || 0) + 1;
      }
    });
  }
});

// Get capabilities content if available
const capabilitiesContent = contentAreas?.capabilities || {
  title: "Explore Foundational Capabilities",
  content: `<p>Discover <em>${capabilityCount} Foundational Capabilities</em> that address <em>${bottleneckCount} Bottlenecks</em> in scientific advancement. Use the search and filters to find capabilities relevant to your interests.</p>`,
};
---

<BaseLayout title="Foundational Capabilities - Convergent 101">
  <div class="dashboard-header">
    <h1>{capabilitiesContent.title}</h1>
    <div
      class="dashboard-content notion-content"
      set:html={capabilitiesContent.content}
    />
  </div>

  <div class="dashboard-layout">
    <aside class="dashboard-layout__sidebar">
      <FieldFilter
        client:load
        fields={fields}
        initialSelectedIds={fieldSlugs}
        fieldCounts={fieldCounts}
      />
    </aside>

    <div class="dashboard-layout__main">
      <!-- Private Tag Banner -->
      <PrivateTagBanner client:load />

      <div class="dashboard-search">
        <Search
          client:load
          initialQuery={searchQuery}
          bottleneckCount={bottleneckCount}
          capabilityCount={capabilityCount}
        />
        <div class="dashboard-controls">
          <SortControl client:load initialSortBy={sortBy} />
          <ViewToggle client:load />
        </div>
      </div>

      <CapabilitiesGrid
        client:load
        capabilities={foundationalCapabilities}
        initialSearchQuery={searchQuery}
        initialSelectedFieldIds={fieldSlugs}
        initialSortBy={sortBy}
        initialSelectedTag={tag}
        initialPrivateTag={privateTag}
      />
    </div>
  </div>
</BaseLayout>

<script>
  import { saveCurrentUrlState } from "../../lib/navigationUtils";

  // Save the current URL state for potential "back" navigation
  document.addEventListener("astro:page-load", () => {
    saveCurrentUrlState();
  });

  // Also save URL state when search or filter changes
  window.addEventListener("search-changed", () => {
    saveCurrentUrlState();
  });

  window.addEventListener("fields-changed", () => {
    saveCurrentUrlState();
  });

  window.addEventListener("sort-changed", () => {
    saveCurrentUrlState();
  });

  // Add listeners for the tag events
  window.addEventListener("tag-changed", () => {
    saveCurrentUrlState();
  });

  window.addEventListener("private-tag-changed", () => {
    saveCurrentUrlState();
  });
</script>
