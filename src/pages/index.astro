---
import BaseLayout from "../layouts/BaseLayout.astro";
import Search from "../components/standalone/Search";
import FieldFilter from "../components/standalone/FieldFilter";
import DashboardGrid from "../components/standalone/DashboardGrid";
import ViewToggle from "../components/standalone/ViewToggle";
import SortControl from "../components/standalone/SortControl";
import PrivateTagBanner from "../components/standalone/PrivateTagBanner";
import { extractTags, parseUrlParamsWithTags } from "../lib/tagUtils";
import { getEnhancedData } from "../lib/enhancedData";
import ContentTypeNav from '../components/standalone/ContentTypeNav';

// Fetch all enhanced data from Notion at build time
const { bottlenecks, foundationalCapabilities, fields, contentAreas, resources } =
  await getEnhancedData();

// Extract all unique tags from bottlenecks
const tags = extractTags(bottlenecks);

// Get URL parameters including tag parameters
const { searchQuery, fieldSlugs, sortBy, tag, privateTag } =
  parseUrlParamsWithTags(Astro.url.toString());

// Calculate counts for display
const bottleneckCount = bottlenecks.length;
const capabilityCount = foundationalCapabilities.length;

// Calculate field counts
const fieldCounts = {};
bottlenecks.forEach((bottleneck) => {
  if (bottleneck.field && bottleneck.field.id) {
    fieldCounts[bottleneck.field.id] =
      (fieldCounts[bottleneck.field.id] || 0) + 1;
  }
});

// Get home content if available
const homeContent = contentAreas?.home || {
  title: "Discover Patterns among Problems",
  content: `<p>Explore <em>${bottleneckCount} R&D Gaps</em> in scientific advancement and <em>${capabilityCount} related Foundational Capabilities</em>. Use the search and filters to discover bottlenecks relevant to your interests.</p>`,
};
---

<BaseLayout title="Gap Map">
  <div class="dashboard-header">
    <h1>{homeContent.title}</h1>
    <div
      class="dashboard-content notion-content"
      set:html={homeContent.content}
    />
  </div>

  <div class="dashboard-layout">
    <aside class="dashboard-layout__sidebar">
      <FieldFilter
        client:load
        fields={fields}
        initialSelectedIds={fieldSlugs}
        fieldCounts={fieldCounts}
      />
    </aside>

    <div class="dashboard-layout__main">
      <!-- Private Tag Banner -->
      <PrivateTagBanner client:load />

      <div class="dashboard-search">
        <Search
          client:load
          initialQuery={searchQuery}
          bottleneckCount={bottleneckCount}
          capabilityCount={capabilityCount}
        />

        <div class="dashboard-controls">
          <ViewToggle client:load />
          <SortControl client:load initialSortBy={sortBy} />
          <ContentTypeNav />
        </div>
      </div>

      <DashboardGrid
        client:load
        viewType="bottlenecks"
        bottlenecks={bottlenecks}
        capabilities={foundationalCapabilities}
        resources={resources}
        fields={fields}
        initialSearchQuery={searchQuery}
        initialSelectedFieldIds={fieldSlugs}
        initialSortBy={sortBy}
        initialSelectedTag={tag}
        initialPrivateTag={privateTag}
      />
    </div>
  </div>
</BaseLayout>

<script>
  import { saveCurrentUrlState } from "../lib/navigationUtils";

  // Save the current URL state for potential "back" navigation
  document.addEventListener("astro:page-load", () => {
    saveCurrentUrlState();
  });

  // Also save URL state when search or filter changes
  window.addEventListener("search-changed", () => {
    saveCurrentUrlState();
  });

  window.addEventListener("fields-changed", () => {
    saveCurrentUrlState();
  });

  window.addEventListener("sort-changed", () => {
    saveCurrentUrlState();
  });

  // Add listeners for the new tag events
  window.addEventListener("tag-changed", () => {
    saveCurrentUrlState();
  });

  window.addEventListener("private-tag-changed", () => {
    saveCurrentUrlState();
  });
</script>