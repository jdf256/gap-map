---
import BaseLayout from '../layouts/BaseLayout.astro';
import Search from '../components/standalone/Search';
import Filter from '../components/standalone/Filter';
import BottleneckGrid from '../components/standalone/DashboardGrid';
import ViewToggle from '../components/standalone/ViewToggle';
import SortControl from '../components/standalone/SortControl';
import ThemeToggle from '../components/standalone/ThemeToggle';
import { getAllData } from '../lib/notion';
import { extractDisciplines, parseUrlParams } from '../lib/dataUtils';
import { getEnhancedData } from '../lib/enhancedData';

// Fetch all enhanced data from Notion at build time
const { bottlenecks, solutions, disciplines } = await getEnhancedData();

// Get URL parameters
const { searchQuery, disciplineSlugs, sortBy } = parseUrlParams(Astro.url.toString());

// Calculate counts for display
const bottleneckCount = bottlenecks.length;
const solutionCount = solutions.length;

// Calculate discipline counts
const disciplineCounts = {};
bottlenecks.forEach(bottleneck => {
  if (bottleneck.discipline && bottleneck.discipline.id) {
    disciplineCounts[bottleneck.discipline.id] = (disciplineCounts[bottleneck.discipline.id] || 0) + 1;
  }
});
---

<BaseLayout title="Bottleneckbase">
  
  <div class="dashboard-header">
    <h1>Discover Patterns among Problems</h1>
    <p>
      Explore <em>{bottleneckCount} Bottlenecks in scientific advancement</em> and <em>{solutionCount} related Fundamental Capabilities</em>.
      Use the search and filters to discover bottlenecks relevant to your interests.
    </p>
  </div>
  
  
  <div class="dashboard-layout">
    <aside class="dashboard-layout__sidebar">
      <Filter 
        client:load 
        disciplines={disciplines} 
        initialSelectedIds={disciplineSlugs}
        disciplineCounts={disciplineCounts}
      />
    </aside>
    
    <div class="dashboard-layout__main">
      <div class="dashboard-search">
        <Search 
          client:load 
          initialQuery={searchQuery} 
          bottleneckCount={bottleneckCount} 
          solutionCount={solutionCount}
        />
        <div class="dashboard-controls">
          <SortControl client:load initialSortBy={sortBy} />
          <ViewToggle client:load />
        </div>
      </div>
      
      <BottleneckGrid 
        client:load 
        bottlenecks={bottlenecks}
        initialSearchQuery={searchQuery}
        initialSelectedDisciplineIds={disciplineSlugs}
        initialSortBy={sortBy}
      />
    </div>
  </div>
</BaseLayout>

<script>
  import { saveCurrentUrlState } from '../lib/navigationUtils';
  
  // Save the current URL state for potential "back" navigation
  document.addEventListener('astro:page-load', () => {
    saveCurrentUrlState();
  });
  
  // Also save URL state when search or filter changes
  window.addEventListener('search-changed', () => {
    saveCurrentUrlState();
  });
  
  window.addEventListener('disciplines-changed', () => {
    saveCurrentUrlState();
  });
  
  window.addEventListener('sort-changed', () => {
    saveCurrentUrlState();
  });
</script>