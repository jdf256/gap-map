<script is:inline>
  // IMPORTANT: This script must run as early as possible to prevent flash
  (function () {
    // Check if we're in a view transition
    const isViewTransition = document.startViewTransition !== undefined && 
                             document.querySelector("html.astro-route-announcer");

    // Function to load user preferences
    function loadUserPreferences() {
      let darkMode = false; // Default
      let isListView = false; // Default
      let isGraphView = false; // Default
      let viewType = 'grid'; // Default
      
      try {
        // Try localStorage first
        const savedPrefs = localStorage.getItem("userPreferences");
        if (savedPrefs) {
          const prefs = JSON.parse(savedPrefs);
          if (typeof prefs.darkMode === "boolean") {
            darkMode = prefs.darkMode;
          }
          
          // Handle view type with appropriate fallbacks
          if (prefs.viewType) {
            viewType = prefs.viewType;
            isListView = viewType === 'list';
            isGraphView = viewType === 'graph';
          } else if (typeof prefs.isListView === "boolean") {
            isListView = prefs.isListView;
            isGraphView = false;
            viewType = isListView ? 'list' : 'grid';
          } else if (typeof prefs.isGraphView === "boolean") {
            isGraphView = prefs.isGraphView;
            isListView = false;
            viewType = isGraphView ? 'graph' : 'grid';
          }
        } else if (window.matchMedia) {
          // Fall back to system preference if no saved preference
          darkMode = window.matchMedia("(prefers-color-scheme: dark)").matches;
        }
        
        // Create a global preferences object for later use
        window.userPreferences = window.userPreferences || {};
        window.userPreferences.darkMode = darkMode;
        window.userPreferences.isListView = isListView;
        window.userPreferences.isGraphView = isGraphView;
        window.userPreferences.viewType = viewType;
        
        // Expose for hydration
        window.hydrationData = window.hydrationData || {};
        window.hydrationData.darkMode = darkMode;
        window.hydrationData.isListView = isListView;
        window.hydrationData.isGraphView = isGraphView;
        window.hydrationData.viewType = viewType;
        
        return { darkMode, isListView, isGraphView, viewType };
      } catch (e) {
        console.error("Error loading user preferences:", e);
        return { darkMode: false, isListView: false, isGraphView: false, viewType: 'grid' };
      }
    }
    
    // Function to apply theme to document
    function applyTheme(document, prefs) {
      const { darkMode, isListView, isGraphView, viewType } = prefs;
  
  // Set data attributes for CSS access
  document.documentElement.dataset.theme = darkMode ? "dark" : "light";
  document.documentElement.dataset.listView = isListView ? "true" : "false";
  document.documentElement.dataset.graphView = isGraphView ? "true" : "false";

  // Apply theme classes
  if (darkMode) {
    document.documentElement.classList.add("dark-mode");
  } else {
    document.documentElement.classList.remove("dark-mode");
  }
      
      // Apply view mode when DOM is ready
      document.addEventListener('DOMContentLoaded', function() {
        // Apply to grid elements
        const grids = document.querySelectorAll('.bottleneck-grid');
        grids.forEach(grid => {
          // Reset view classes
          grid.classList.remove('bottleneck-grid--list-view');
          grid.classList.remove('bottleneck-grid--graph-view');
          
          // Apply appropriate class
          if (viewType === 'list') {
            grid.classList.add('bottleneck-grid--list-view');
          } else if (viewType === 'graph') {
            grid.classList.add('bottleneck-grid--graph-view');
          }
        });
        
        // Add dashboard class if needed
        const isDashboard = 
          window.location.pathname === "/" || 
          window.location.pathname === "" || 
          window.location.pathname === "/bottlenecks" || 
          window.location.pathname === "/capabilities";
        
        if (isDashboard) {
          document.body.classList.add('on-dashboard-page');
        }
      });
      
      // Load field color CSS if not already loaded
      if (!document.getElementById('field-color-styles')) {
        const fieldColorCssPath = '/styles/generated/field-colors.css';
        try {
          // Create a link element for the generated CSS
          const linkElement = document.createElement('link');
          linkElement.id = 'field-color-styles';
          linkElement.rel = 'stylesheet';
          linkElement.href = fieldColorCssPath;
          document.head.appendChild(linkElement);
        } catch (error) {
          console.error('Error loading field colors CSS:', error);
        }
      }
    }
    
    // Don't reset the theme if we're in a view transition
    if (!isViewTransition) {
      const prefs = loadUserPreferences();
      applyTheme(document, prefs);
    }
    
    // ====== Handle Astro View Transitions ======
    
    // Before leaving the current page
    document.addEventListener("astro:before-preparation", (e) => {
      // Store current state in transition object
      const darkMode = document.documentElement.classList.contains("dark-mode");
      const isListView = document.documentElement.dataset.listView === "true";
      const isGraphView = document.documentElement.dataset.graphView === "true";
      const viewType = isGraphView ? 'graph' : (isListView ? 'list' : 'grid');
      e.state.themePrefs = { darkMode, isListView, isGraphView, viewType };
    });
    
    // After the new page content is loaded but before it's shown
    document.addEventListener("astro:after-preparation", (e) => {
      if (e.state.themePrefs) {
        // Apply stored theme to the new document
        applyTheme(e.newDocument, e.state.themePrefs);
      }
    });
    
    // After navigation is complete
    document.addEventListener("astro:page-load", () => {
      // Ensure preferences are loaded and applied after each navigation
      const prefs = loadUserPreferences();
      applyTheme(document, prefs);
    });
    
    // Handle popstate events (browser back/forward navigation)
    window.addEventListener("popstate", () => {
      // Re-apply theme when using browser navigation
      const prefs = loadUserPreferences();
      applyTheme(document, prefs);
    });
  })();
</script>