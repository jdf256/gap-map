<script is:inline>
  // IMPORTANT: This script must run as early as possible to prevent flash
  (function () {
    // Check if we're in a view transition
    const isViewTransition = document.startViewTransition !== undefined && 
                             document.querySelector("html.astro-route-announcer");

    // Function to load user preferences
    function loadUserPreferences() {
  let darkMode = false;
  let viewType = 'grid'; // Default view type
  
  try {
    // Try localStorage
    const savedPrefs = localStorage.getItem("userPreferences");
    if (savedPrefs) {
      const prefs = JSON.parse(savedPrefs);
      
      // Handle dark mode
      if (typeof prefs.darkMode === "boolean") {
        darkMode = prefs.darkMode;
      }
      
      // Handle view type with fallbacks for backward compatibility
      if (prefs.viewType) {
        viewType = prefs.viewType;
      } else if (prefs.isListView) {
        viewType = 'list';
      } else if (prefs.isGraphView) {
        viewType = 'graph';
      }
    } else if (window.matchMedia) {
      // System dark mode preference fallback
      darkMode = window.matchMedia("(prefers-color-scheme: dark)").matches;
    }
    
    // Store in global for access
    window.userPreferences = {
      darkMode,
      viewType,
      isListView: viewType === 'list',
      isGraphView: viewType === 'graph'
    };
    
    return { darkMode, viewType };
  } catch (e) {
    console.error("Error loading user preferences:", e);
    return { darkMode: false, viewType: 'grid' };
  }
}
    
    // Function to apply theme to document
    function applyPreferences(document, { darkMode, viewType }) {
  // Set theme
  document.documentElement.dataset.theme = darkMode ? "dark" : "light";
  if (darkMode) {
    document.documentElement.classList.add("dark-mode");
  } else {
    document.documentElement.classList.remove("dark-mode");
  }
  
  // Apply view type attributes
  document.documentElement.dataset.listView = viewType === 'list' ? "true" : "false";
  document.documentElement.dataset.graphView = viewType === 'graph' ? "true" : "false";
  
  // Set classes on grid elements if they exist
  document.addEventListener('DOMContentLoaded', function() {
    const grids = document.querySelectorAll('.bottleneck-grid');
    grids.forEach(grid => {
      // Remove any existing view classes
      grid.classList.remove('bottleneck-grid--list-view');
      grid.classList.remove('bottleneck-grid--graph-view');
      
      // Apply appropriate class
      if (viewType === 'list') {
        grid.classList.add('bottleneck-grid--list-view');
      } else if (viewType === 'graph') {
        grid.classList.add('bottleneck-grid--graph-view');
      }
    });
  });
}

    // Don't reset the theme if we're in a view transition
    if (!isViewTransition) {
      const prefs = loadUserPreferences();
      applyTheme(document, prefs);
    }
    
    // ====== Handle Astro View Transitions ======
    
    // Before leaving the current page
    document.addEventListener("astro:before-preparation", (e) => {
      // Store current state in transition object
      const darkMode = document.documentElement.classList.contains("dark-mode");
      const isListView = document.documentElement.dataset.listView === "true";
      e.state.themePrefs = { darkMode, isListView };
    });
    
    // After the new page content is loaded but before it's shown
    document.addEventListener("astro:after-preparation", (e) => {
      if (e.state.themePrefs) {
        // Apply stored theme to the new document
        applyTheme(e.newDocument, e.state.themePrefs);
      }
    });
    
    // After navigation is complete
    document.addEventListener("astro:page-load", () => {
      // Ensure preferences are loaded and applied after each navigation
      const prefs = loadUserPreferences();
      applyTheme(document, prefs);
    });
    
    // Handle popstate events (browser back/forward navigation)
    window.addEventListener("popstate", () => {
      // Re-apply theme when using browser navigation
      const prefs = loadUserPreferences();
      applyTheme(document, prefs);
    });
  })();
  const prefs = loadUserPreferences();
applyPreferences(document, prefs);
  document.addEventListener('DOMContentLoaded', function() {
    // Check if we're on a dashboard page
    const path = window.location.pathname;
    const isDashboard = 
      path === "/" || 
      path === "" || 
      path === "/bottlenecks" || 
      path === "/capabilities";
    
    if (isDashboard) {
      // Add a class to the body element
      document.body.classList.add('on-dashboard-page');
      
      // Apply view preference early
      const prefs = window.userPreferences || {};
      const viewType = prefs.viewType || 'grid';
      
      // Set data attributes early
      document.documentElement.dataset.listView = viewType === 'list' ? 'true' : 'false';
      document.documentElement.dataset.graphView = viewType === 'graph' ? 'true' : 'false';
    }
  });
</script>